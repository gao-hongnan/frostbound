[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "frostbound"
version = "0.1.0"
description = "Enterprise-grade Python utilities with resilience features"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "GAO Hongnan", email = "hongnangao@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]

[tool.hatch.build.targets.wheel]
packages = ["frostbound"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 120
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
exclude = ["*.ipynb"]
select = [
    "ARG", # flake8-unused-arguments
    "B",
    "C4",
    "G",
    "E",
    "EXE",
    "F",
    "I",   # isort for import sorting
    "SIM1",
    "W",
    # Not included in flake8
    "NPY",
    "PERF",
    "PGH004",
    "PIE794",
    "PIE800",
    "PIE804",
    "PIE807",
    "PIE810",
    "PLC0131", # type bivariance
    "PLC0132", # type param mismatch
    "PLC0205", # string as __slots__
    "PLE",
    "PLR0133", # constant comparison
    "PLR0206", # property with params
    "PLR1722", # use sys exit
    "PLW0129", # assert on string literal
    "PLW0406", # import self
    "PLW0711", # binary op exception
    "PLW1509", # preexec_fn not safe with threads
    "PLW3301", # nested min max
    "PT006", # pytest rules
    "PT022",
    "PT023",
    "PT024",
    "PT025",
    "PT026",
    "PYI",
    "B904",
    "UP",
]
ignore = [
    "E501",   # line-too-long: handled by black.
    "UP006",  # non-pep585-annotation: Use `list` instead of `List` for type annotation.
    "UP015",  # redundant-open-models
    "UP035",  # deprecated-import: `typing.Type` is deprecated, use `type` instead.
    "G004",   # no-logging-fstring: logging should use f-string
    "UP007",  # |
    "B027",
    "UP040",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["frostbound"]
known-third-party = ["pydantic", "numpy", "pytest"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101"]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"
